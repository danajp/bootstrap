---

- name: Ensure ~/bin directory exists
  ansible.builtin.file:
    path: ~/bin
    state: directory
    mode: '0755'

- name: Create dotfiles dir
  ansible.builtin.file:
    state: directory
    path: ~/src/dotfiles
  register: dotfiles_dir

- name: Get dotfiles
  ansible.builtin.git:
    repo: git@github.com:danajp/dotfiles.git
    dest: ~/src/dotfiles
    update: yes
  when: dotfiles_dir.changed

- name: Install dotfiles
  ansible.builtin.command:
    cmd: make clean install
    chdir: ~/src/dotfiles

- name: Create dotemacs dir
  ansible.builtin.file:
    state: directory
    path: ~/src/dotemacs
  register: dotemacs_dir

- name: Get dotemacs
  tags: [emacs]
  ansible.builtin.git:
    repo: git@github.com:danajp/dotemacs.git
    dest: ~/src/dotemacs
    update: no
  when: dotemacs_dir.changed

- name: Link emacs config
  tags: [emacs]
  ansible.builtin.file:
    src: ~/src/dotemacs
    dest: ~/.emacs.d
    state: link
    force: yes

- name: Download emacs-lsp-booster
  tags: [emacs, emacs-lsp-booster]
  ansible.builtin.unarchive:
    src: https://github.com/blahgeek/emacs-lsp-booster/releases/download/v0.2.1/emacs-lsp-booster_v0.2.1_x86_64-unknown-linux-musl.zip
    dest: ~/bin
    remote_src: true

- name: Check if oh-my-zsh installed
  tags: [zsh]
  ansible.builtin.stat:
    path: ~/.oh-my-zsh
  register: omz_exists

- name: Install oh-my-zsh
  tags: [zsh]
  when: not omz_exists.stat.exists
  block:
    - name: Download oh-my-zsh installer
      tags: [zsh]
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
        dest: /tmp/oh-my-zsh-install.sh

    - name: Install oh-my-zsh
      tags: [zsh]
      ansible.builtin.command:
        argv:
          - sh
          - /tmp/oh-my-zsh-install.sh
          - ""
          - --unattended
        creates: ~/.oh-my-zsh

    - name: Remove oh-my-zsh installer
      tags: [zsh]
      ansible.builtin.file:
        path: /tmp/oh-my-zsh-install.sh
        state: absent

- name: Check if asdf installed
  tags: [asdf, install-asdf]
  ansible.builtin.stat:
    path: ~/bin/asdf
  register: asdf_exists

- name: Download and install asdf
  tags: [asdf, install-asdf]
  when: not asdf_exists.stat.exists
  block:
    - name: Download asdf tarball
      ansible.builtin.get_url:
        url: https://github.com/asdf-vm/asdf/releases/download/v0.16.3/asdf-v0.16.3-linux-386.tar.gz
        dest: /tmp/asdf.tar.gz
        mode: '0644'

    - name: Extract only asdf binary to ~/bin
      ansible.builtin.unarchive:
        src: /tmp/asdf.tar.gz
        dest: ~/bin
        remote_src: yes
        extra_opts:
          - asdf

    - name: Remove downloaded tarball
      ansible.builtin.file:
        path: /tmp/asdf.tar.gz
        state: absent

- name: Install asdf plugins
  tags: [asdf, asdf-plugins]
  ansible.builtin.command:
    cmd: 'asdf plugin add {{ item.name }} {{ item.repo | default("") }}'
    creates: "~/.asdf/plugins/{{ item.name }}"
  with_items:
    - name: 1password-cli
    - name: argo
    - name: argocd
    - name: awscli
    - name: aws-vault
    - name: bat
    - name: buildpack
    - name: buf
    - name: cfssl
    - name: cmctl
    - name: direnv
    - name: github-cli
    - name: golang
    - name: golangci-lint
    - name: helm
    - name: jb
    - name: jq
    - name: jsonnet
    - name: kind
#    - name: krew
    - name: kubebuilder
    - name: kubectl
    - name: kustomize
    - name: loki-logcli
    - name: minikube
    - name: nodejs
    - name: opa
    - name: protoc
    - name: python
    - name: ruby
    - name: shellcheck
    - name: starship
    - name: tanka
    - name: terraform
    - name: vault
    - name: yj
    - name: yq

- name: Additional nodejs plugin setup
  tags: [asdf, asdf-plugins, asdf-plugins-nodejs]
  ansible.builtin.shell: |
    ~/.asdf/plugins/nodejs/bin/import-release-team-keyring
    date > ~/.asdf/plugins/nodejs/dana-keyring-imported
  args:
    executable: /bin/bash
    creates: ~/.asdf/plugins/nodejs/dana-keyring-imported

- name: Default ruby gems
  tags: [asdf, asdf-plugins, asdf-plugins-ruby]
  ansible.builtin.copy:
    content: |
      bundler
      solargraph
      solargraph-standardrb
    dest: ~/.default-gems

- name: Default python packages
  tags: [asdf, asdf-plugins, asdf-plugins-python]
  ansible.builtin.copy:
    content: |
      pipenv
    dest: ~/.default-python-packages

- name: Default go packages
  tags: [asdf, asdf-plugins, asdf-plugins-golang]
  ansible.builtin.copy:
    content: |
      golang.org/x/tools/gopls@latest
      github.com/rogpeppe/godef@latest
      golang.org/x/tools/cmd/goimports@latest
      github.com/zmb3/gogetdoc@latest
      github.com/maruel/panicparse/v2/cmd/pp@latest
    dest: ~/.default-golang-pkgs

- name: Direnv config dir
  tags: [asdf, asdf-plugins, asdf-plugins-direnv]
  ansible.builtin.file:
    dest: ~/.config/direnv
    state: directory

- name: Direnv config
  tags: [asdf, asdf-plugins, asdf-plugins-direnv]
  ansible.builtin.copy:
    content: |
      [global]
      hide_env_diff = true
      warn_timeout = "30s"
    dest: ~/.config/direnv/direnv.toml

- name: Install global asdf tool versions
  tags: [asdf, asdf-tool-versions]
  ansible.builtin.shell: |
    name="{{ item.name }}"
    version="{{ item.version | default("") }}"

    if [[ "$version" == "" ]]; then
      version="$(asdf latest "$name")"
    fi

    asdf install "$name" "$version"
    asdf global "$name" "$version"
  args:
    executable: /bin/bash
  with_items:
   - name: argo
     version: 3.2.8
   - name: argocd
   - name: awscli
   - name: aws-vault
   - name: github-cli
   - name: golang
   - name: helm
   - name: jq
   - name: kind
   - name: kubectl
   - name: kustomize
   - name: loki-logcli
   - name: minikube
   - name: shellcheck
   - name: starship
   - name: terraform
   - name: vault
   - name: yj
   - name: nodejs # needed for yaml lsp

# these compile stuff and take a long time, skip them by default
- name: Install expensive asdf tool versions
  tags: [asdf-tool-versions-expensive, never]
  ansible.builtin.command:
    cmd: "asdf install {{ item.name }} {{ item.version }}"
    creates: "~/.asdf/installs/{{ item.name }}/{{ item.version }}"
  with_items:
   - { name: python, version: 3.6.0 }
   - { name: python, version: 3.6.1 }
   - { name: python, version: 3.7.5 }
   - { name: ruby, version: 2.4.0 }
   - { name: ruby, version: 2.4.1 }
   - { name: ruby, version: 2.4.2 }
   - { name: ruby, version: 2.4.3 }
   - { name: ruby, version: 2.4.4 }
   - { name: ruby, version: 2.4.5 }
   - { name: ruby, version: 2.4.6 }
   - { name: ruby, version: 2.5.5 }
   - { name: ruby, version: 2.6.3 }
   - { name: ruby, version: 2.6.4 }
   - { name: ruby, version: 2.6.5 }

# installs yaml lsp server with the global nodejs version to be used by emacs
- name: Install yaml lsp server
  tags: [asdf, asdf-plugins-nodejs]
  ansible.builtin.shell: |
    asdf reshim nodejs
    npm install -g yaml-language-server
    asdf reshim nodejs
  args:
    chdir: ~/
    creates: ~/.asdf/shims/yaml-language-server

- name: Set regolith look
  tags: [regolith]
  ansible.builtin.shell: |
    regolith-look set solarized-dark
    regolith-look refresh
  args:
    executable: /bin/bash
    creates: ~/.Xresources-regolith

- name: Create fonts dir
  tags: [powerline]
  ansible.builtin.file:
    dest: ~/.local/share/fonts
    state: directory

- name: Install powerline patched font
  tags: [powerline]
  ansible.builtin.get_url:
    url: https://github.com/powerline/fonts/raw/master/Inconsolata/Inconsolata%20for%20Powerline.otf
    dest: ~/.local/share/fonts/Inconsolata for Powerline.otf

- name: Install powerline bold patched font
  tags: [powerline]
  ansible.builtin.get_url:
    url: https://github.com/powerline/fonts/raw/master/Inconsolata/Inconsolata%20Bold%20for%20Powerline.ttf
    dest: ~/.local/share/fonts/Inconsolata Bold for Powerline.ttf

- name: Refresh font cache
  tags: [powerline]
  ansible.builtin.shell: |
    fc-cache -vf ~/.local/share/fonts
