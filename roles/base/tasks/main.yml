---

- name: Install basic packages
  tags: [packages]
  apt:
    name:
      - git
      - gnupg
      - tmux
      - python-dev
      - openssh-server
      - openvpn
      - laptop-mode-tools
      - apt-transport-https
      - ca-certificates
      - postgresql-client
      - libpq-dev
      - awscli
      - redis-tools
      # for ansible aws
      - python-pip
      - python-boto
      - virtualbox
      - powertop
      - powerline
      - youtube-dl
      - phantomjs
      - nodejs
      - wine-stable
      - default-jre
      - sloccount
      - htop
      - traceroute
      - gnutls-bin
      - xclip
      - ldap-utils
      - moreutils
      - graphviz
      - curl
      - gconf2
      - copyq
    state: latest

- name: Add emacs PPA
  tags: [emacs, packages]
  apt_repository:
    repo: ppa:kelleyk/emacs
    state: present
    update_cache: yes

- name: Install emacs
  tags: [emacs, packages]
  apt:
    name:
      - emacs26

- name: Install ruby build dependencies
  tags: [ruby, packages]
  apt:
    name:
      - libssl-dev
      - libreadline-dev
      - zlib1g-dev
      - libsqlite3-dev
      - cmake
      - libgmp-dev
    state: latest

- name: Install desktop packages
  tags: [packages, desktop]
  apt:
    name:
      - i3
      - pasystray
      - rxvt-unicode
      - xfonts-terminus
      - arandr
      - gimp
      - maim
      - xautolock
      - blueman
    state: latest

#- name: Disable Wayland for gdm3
#  tags: [desktop, gdm3]
#  ini_file:
#    path: /etc/gdm3/custom.conf
#    section: daemon
#    option: WaylandEnable
#    value: "false"
#    backup: yes
#
#- name: Disable login manager altogether
#  tags: [desktop]
#  command: systemctl set-default multi-user.target

- name: Add powerline symbols to terminus font
  tags: [packages, powerline]
  copy:
    src: 11-powerline-symbols-terminus.conf
    dest: /etc/fonts/conf.d/
    owner: root
    group: root
    mode: 0644

- name: Rebuild font cache
  tags: [packages, powerline]
  shell: fc-cache

- name: Install Alacritty
  tags: [packages, desktop, alacritty]
  apt:
    deb: https://github.com/jwilm/alacritty/releases/download/v0.4.0/Alacritty-v0.4.0-ubuntu_18_04_amd64.deb
    state: present

- name: Install jq
  # to get the latest jq, which isn't in the apt repos
  tags: [packages, jq]
  get_url:
    url: https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
    dest: /usr/local/bin/jq
    owner: root
    group: root
    mode: 0755

- name: Add apt repository for firefox
  # No longer getting updates because this isn't an LTS of ubuntu, so
  # get security updates from upstream PPA
  tags: [packages, desktop, firefox]
  apt_repository:
    repo: ppa:ubuntu-mozilla-security/ppa
    state: present
    update_cache: yes

- name: Install firefox
  tags: [packages, desktop, firefox]
  apt:
    pkg: firefox
    state: present

- name: Check for google chrome apt source
  stat:
    path: /etc/apt/sources.list.d/google-chrome.list
  register: chrome_source

- name: Install google chrome
  tags: [packages, desktop, chrome]
  apt:
    deb: https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
    state: present
  when: not chrome_source.stat.exists

- name: Check for slack apt source
  stat:
    path: /etc/apt/sources.list.d/slack.list
  register: slack_source

- name: Install slack client
  tags: [packages, desktop, slack]
  apt:
    deb: "https://downloads.slack-edge.com/linux_releases/slack-desktop-{{ slack.version }}-amd64.deb"
    state: present
  when: not slack_source.stat.exists

- name: Add apt keys for docker
  tags: [packages, docker]
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    id: BA07F4FB

- name: Add apt repository for docker
  tags: [packages, docker]
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ docker_engine.ubuntu_release }} stable"
    state: present
    update_cache: yes

- name: Install docker
  tags: [packages, docker]
  apt:
    pkg: docker-ce
    state: present

- name: Install container-structure-test
  tags: [packages, docker, container-structure-test]
  get_url:
    url: https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
    dest: /usr/local/bin/container-structure-test
    owner: root
    group: root
    mode: 0755

- name: Add apt keys for gcloud
  tags: [packages, gcloud]
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    id: A6F9F1CA

- name: Add apt repository for gcloud
  tags: [packages, gcloud]
  apt_repository:
    repo: deb http://packages.cloud.google.com/apt cloud-sdk-{{ ubuntu.release }} main
    state: present
    update_cache: yes

- name: Install gcloud
  tags: [packages, gcloud]
  apt:
    pkg: google-cloud-sdk
    state: present

- name: Add sudoers files
  tags: [sudoers]
  copy:
    src: sudoers.d/
    dest: /etc/sudoers.d/
    owner: root
    group: root
    mode: 0440
    validate: "visudo -cf %s"

- name: Modify nsswitch.conf
  tags: [nsswitch]
  copy:
    src: nsswitch.conf
    dest: /etc/
    owner: root
    group: root
    mode: 0644
    backup: yes

- name: Add apt key for heroku
  tags: [packages, heroku]
  apt_key:
    url: https://cli-assets.heroku.com/apt/release.key

- name: Add apt repository for heroku
  tags: [packages, heroku]
  apt_repository:
    repo: deb https://cli-assets.heroku.com/apt ./
    state: present
    update_cache: yes

- name: Install heroku cli
  tags: [packages, heroku]
  apt:
    pkg: heroku
    state: present

- name: Check if hub is installed
  tags: [hub]
  stat:
    path: /usr/local/bin/hub
  register: hub_installed

- name: Create hub install dir
  tags: [hub]
  file:
    path: /tmp/hub
    state: directory
  when: hub_installed.stat.exists == false

- name: Download hub
  tags: [hub]
  get_url:
    url: "https://github.com/github/hub/releases/download/v{{ hub.version }}/hub-linux-amd64-{{ hub.version }}.tgz"
    dest: /tmp/hub
  when: hub_installed.stat.exists == false

- name: Install hub
  tags: [hub]
  shell: |
    tar --strip-components=1 -zxpf *.tgz
    ./install
  args:
    chdir: /tmp/hub
  when: hub_installed.stat.exists == false

- name: Remove hub installation files
  tags: [hub]
  file:
    path: /tmp/hub
    state: absent
  when: hub_installed.stat.exists == false

- name: Install Slackcat
  tags: [slackcat]
  get_url:
    url: "https://github.com/bcicen/slackcat/releases/download/v{{ slackcat.version }}/slackcat-{{ slackcat.version }}-linux-amd64"
    dest: /usr/local/bin/slackcat
    owner: root
    group: root
    mode: 0755

- name: Install lein
  tags: [clojure]
  get_url:
    url: https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
    dest: /usr/local/bin/lein
    owner: root
    group: root
    mode: 0755

- name: Install aws-vault
  tags: [aws]
  get_url:
    url: "https://github.com/99designs/aws-vault/releases/download/v{{ aws_vault.version }}/aws-vault-linux-amd64"
    dest: /usr/local/bin/aws-vault
    owner: root
    group: root
    mode: 0755

- name: Install vagrant
  tags: [vagrant]
  apt:
    deb: https://releases.hashicorp.com/vagrant/2.2.7/vagrant_2.2.7_x86_64.deb

- name: Get yj download url
  tags: [yj]
  shell: |
    curl -s https://api.github.com/repos/sclevine/yj/releases/latest \
      | jq -r '.assets[] | select(.name == "yj-linux") | .browser_download_url'
  register: yj_url

- name: Install yj
  tags: [yj]
  get_url:
    url: "{{ yj_url.stdout }}"
    dest: /usr/local/bin/yj
    owner: root
    group: root
    mode: 0755

- name: install DuoConnect
  tags: [duo]
  unarchive:
    src: https://dl.duosecurity.com/DuoConnect-latest.tar.gz
    remote_src: yes
    dest: /usr/local/bin
    owner: root
    group: root
    mode: 0755
    exclude: install.sh
